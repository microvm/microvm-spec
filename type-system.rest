===========
Type System
===========

Overview
========

The µVM has a comprehensive type system. It is close to the machine level, but
also has reference types for exact garbage collection.

In the µVM IR, a type is created by a (possibly recursive) combination of type
constructors.

By convention, types are written in lower cases. Parameters to types are written
in angular brackets ``< >``.

The binary form of the type constructors is shown in the table after each type
constructor.

Type and Data Value
===================

A µVM **type** defines a set where a **data value**, or **value** when
unambiguous, is one of its elements.

A type also has an in-memory format by which its data values can be represented
in bytes. That is described in `<uvm-memory>`__.

    NOTE: The format mentioned above only applies to the memory. Values held by
    SSA variables do not need to respect that format. See `<instruction-set>`__.

Types and Type Constructors
===========================

A **type constructor** represents an **abstract type**. A **concrete type** is
created by applying a type constructor and supplying necessary **parameters**.
The following type constructors are available in the µVM:

- int < length >
- float
- double
- ref < T >
- iref < T >
- weakref < T >
- struct < T1 T2 ... >
- array < T length >
- hybrid < F V >
- void
- func < sig >
- thread
- stack
- tagref64
- vector < T length >

Parameters of a type are in the angular brackets. They can be integer literals,
types and function signatures. In the text form, the latter two are global
names (See `<uvm-ir>`__). In the binary form, they are IDs.

There are several kinds of types.

* ``float`` and ``double`` are **floating point types**.
* ``ref`` and ``weakref`` are **object referenct types**.
* ``ref``, ``iref`` and ``weakref`` are **reference types**.
* ``ref``, ``iref``, ``weakref``, ``func``, ``thread`` and ``stack`` are
  **general reference types**.
* ``int``, ``float``, ``double``, ``ref``, ``iref``, ``weakref``, ``func``,
  ``thread``, ``stack`` and ``tagref64`` are **scalar types**.
* ``vector``, ``struct``, ``array`` and ``hybrid`` are **composite types**.
* ``hybrid`` is the only **variable-length type**. All other types are
  **fixed-length types**.
* ``int``, ``ref``, ``iref``, ``func``, ``stack`` or ``thread`` are
  **EQ-comparable types**.

A **marked storage type** T1 of another type T2 represents the same set of
values as T2; in this case T2 is called the **unmarked type** of T1. When a
marked storage type is represented by a memory location, it exhibits special
properties. Specifically:

* ``weakref<T>`` is a marked storage type of ``ref<T>``.

A marked storage type cannot be the type of an SSA variable (defined in
`<instruction-set>`__). Loading from a memory location of a marked storage type
gets a value of its unmarked type. An unmarked type can be stored into a memory
location of its marked storage type.

Integer Type
------------

``int < length >``

    ``length``
        *integer literal*: The length of the integer in bits.

+------+--------+
| opct | i8     |
+======+========+
| 0x01 | length |
+------+--------+

``int`` is an integer type of *length* bits.

``int`` is neutral to signedness. Negative numbers are represented in the 2's
complement notation where the highest bit is the sign bit.

``int<1>`` is a Boolean type, in which case 1 means true and 0 means false.

    NOTE: The signedness of an ``int`` type is determined by the operations
    rather than the type. For example, ``UDIV`` treats both operands as unsigned
    numbers, ``SDIV`` treats both operands as signed numbers and ``ASHR`` treats
    the first operand as signed and the second operand as unsigned.

..

    For LLVM users: these types are directly borrowed from LLVM.

..

    Example::

        .typedef @i1 = int<1>
        .typedef @i8 = int<8>
        .typedef @i16 = int<16>
        .typedef @i32 = int<32>
        .typedef @i64 = int<64>

Floating Point Types
--------------------

``float``

+------+
| opct |
+======+
| 0x02 |
+------+

``double``

+------+
| opct |
+======+
| 0x03 |
+------+

``float`` and ``double`` are the IEEE754 single-precision and double-precision
floating point number type, respectively.

    For LLVM users: these types are directly borrowed from LLVM.

..

    Example::

        .typedef @float = float
        .typedef @double = double

Reference Types
---------------

``ref < T >``

    ``T``
        *type*: The type of referent.

+------+-----+
| opct | idt |
+======+=====+
| 0x04 | T   |
+------+-----+

``iref < T >``

    ``T``
        *type*: The type of referent.

+------+-----+
| opct | idt |
+======+=====+
| 0x05 | T   |
+------+-----+

``weakref < T >``

    ``T``
        *type*: The type of referent.

+------+-----+
| opct | idt |
+======+=====+
| 0x06 | T   |
+------+-----+

``ref`` is an object reference type. A ``ref`` value is a strong reference to a
heap objects.

``iref`` is an internal reference type. An ``iref`` value is an internal
reference to a memory location.

``weakref`` is a weak object reference type. It is a marked storage type of
``ref``. A memory location of ``weakref`` holds a weak reference to a heap
object and can be clear to ``NULL`` by the garbage collector when there is no
strong references to the object the ``weakref`` value refers to.

The type parameter ``T`` is the referent type, which is the type of the heap
object or memory location its value refers to.

All reference types can have ``NULL`` value which does not refer to any heap
object or memory location.

    NOTE: There is no weak internal reference.

..

    For LLVM users: there is no equivalence in LLVM. µVM guarantees that
    all references are identified both in the heap and in the stack and are
    subject to garbage collection. The closest counterpart in LLVM is the
    pointer type. The µVM does not encourage the use of pointers, though pointer
    types will be introduced in µVM in the future.

..

    Example::

        .typedef @i8  = int<8>
        .typedef @i16 = int<16>
        .typedef @i32 = int<32>
        .typedef @float = float
        .typedef @double = double
        .typedef @some_struct = struct<@i32 @i16 @i8 @double @float>
        .typedef @some_array = array<@i8 100>

        .typedef @ref1 = ref<@i32>
        .typedef @ref2 = ref<@some_struct>
        .typedef @ref3 = ref<@some_array>
        .typedef @iref1 = iref<@i32>
        .typedef @iref2 = iref<@some_struct>
        .typedef @iref3 = iref<@some_array>
        .typedef @weakref1 = weakref<@i32>
        .typedef @weakref2 = weakref<@some_struct>
        .typedef @weakref3 = weakref<@some_array>

Struct
------

``struct < T1 T2 ... >``

    ``T1``, ``T2``, ``...``
        *type*: The type of fields.

+------+---------+-----+-----+-----+
| opct | lent    | idt | idt | ... |
+======+=========+=====+=====+=====+
| 0x07 | nfields | T1  | T2  | ... |
+------+---------+-----+-----+-----+

``struct`` is a Cartesian product type of several types. *T1*, *T2*, *...* are
its **field types**. A ``struct`` must have at least one member.

``struct`` cannot be the type of an SSA variable if any of its field types
cannot be the type of an SSA variable.

    NOTE: For example, a ``struct`` with an ``array`` field cannot be the type
    of an SSA variable. However, there can be references to such structs.

In the binary form, an integer literal ``nfields`` determines the number of
fields. Exactly that number of type IDs follows the ``nfields`` literal.

    For LLVM users: this is almost identical to LLVM's struct type, except it
    does not allow embedded arrays.

..

    Example::

        .typedef @byte = int<8>
        .typedef @short = int<16>
        .typedef @int = int<32>
        .typedef @f = float
        .typedef @d = double

        .typedef @struct1 = struct<>
        .typedef @struct2 = struct<@byte @short @int @f @d>
        .typedef @struct3 = struct<@f @f @struct2 @d @d> // nesting structs

Array
-----

``array < T length >``

    ``T``
        *type*: The type of elements.
    ``length``
        *integer literal*: The number of elements.

+------+-----+--------+
| opct | idt | aryszt |
+======+=====+========+
| 0x08 | T   | length |
+------+-----+--------+

An ``array`` is a sequence of homogeneous data structure in the memory. *T* is
its **element type**, i.e. the type of its elements, and *length* is the length
of the array.

``array`` cannot be the type of any SSA variable.

    NOTE: There can be references to arrays.

..

    For LLVM users: **An array always has a fixed length**. There is no type for
    "array of run-time-determined length" in the µVM type system. The closest
    counterpart is the ``hybrid`` type.

..

    Example::

        .typedef @u8 = int<8>
        .typedef @real = double
        .typedef @cmpx = struct<@real @real>

        .typedef @array1 = array<@u8 4096>      // array of 4096 bytes
        .typedef @array2 = array<@real 100>     // array of 100 doubles
        .typedef @array3 = array<@cmpx 16>      // array of 16 structs
        .typedef @array4 = array<@array2 1024>  // array of 1024 nested arrays

Hybrid
------

``hybrid < F V >``

    ``F``
        *type*: The type of the fixed part
    ``V``
        *type*: The type of the elements of the variable part

+------+-----+-----+
| opct | idt | idt |
+======+=====+=====+
| 0x09 | F   | V   |
+------+-----+-----+

A hybrid is a combination of a fixed-length prefix, i.e. its ``fixed part``, and
a variable-length array suffix, i.e. its ``variable part``, whose length is
decided at allocation time. *F* is the type of the fixed part. *V* is the type
of the *elements* of the variable part.

    NOTE: This is intended to play the part of "struct with flexible array
    member" in C99.

``hybrid`` cannot be the type of any SSA variable.

    NOTE: There can be references to hybrids.

..

    Example::

        .typedef @void = void
        .typedef @byte = int<8>
        .typedef @long = int<64>
        .typedef @double = double

        .typedef @struct1 = struct<@long @long @long>

        .typedef @hybrid1 = hybrid<@long @byte>         // one int<64> followed by many int<8>
        .typedef @hybrid2 = hybrid<@struct1 @double>    // one struct followed by many double
        .typedef @hybrid3 = hybrid<@void @byte>         // no header. Just many int<8>.

Void Type
---------

``void``

+------+
| opct |
+======+
| 0x0A |
+------+

The ``void`` type has no value. It can only be used in the following ways:

* As the type of allocation units that do not represent values. Hence it is
  usable as the referent type of reference types.
* As the fixed part of a ``hybrid`` to indicate the absence of the fixed part.
* As the type of instructions or the return type of functions that do not return
  values.

Function Types
--------------

``func < sig >``

    ``sig``
        *function signature*: The signature of the referred function.

+------+-----+
| opct | idt |
+======+=====+
| 0x0B | sig |
+------+-----+

``func`` is a function reference type. It is an opaque reference to a µVM
function and is not interchangeable with reference types. *sig* is the signature
of the function it refers to.

A ``NULL`` value of a ``func`` type does not refer to any function.

    NOTE: The value of a ``func`` may refer to a function that is declared but
    not defined. The value of a ``func`` type does not change even the function
    it refers to is redefined.

..

    NOTE: The difference between a function signature and the ``func`` is that a
    signature can be used in many scenarios, including the foreign function
    interface, but a value of the ``func`` type must refer to a µVM function,
    not a C function, a Client function, an interpreted high-level language
    function or anything else.

..

    For LLVM users: the ``func`` type in µVM is not a pointer (it may be
    implemented under the hood as a pointer to a function, but the Client should
    not depend on that). It is opaque.

..

    Example::
        
        .typedef @i64 = int<64>
        .typedef @void = void

        .funcsig @sig1 = @i64 (@i64 @i64)
        .funcsig @sig2 = @void ()

        .typedef @func1 = func<@sig1>
        .typedef @func2 = func<@sig2>

Opaque Types
------------

``thread``

+------+
| opct |
+======+
| 0x0C |
+------+

``stack``

+------+
| opct |
+======+
| 0x0D |
+------+

``thread`` and ``stack`` are opaque reference types to µVM threads and µVM
stacks, respectively. They are not interchangeable with reference types. Only
some special instructions (e.g. ``NEWSTACK``) or common instructions (e.g.
``@uvm.new_thread``) can operate on them.

Both ``thread`` and ``stack`` values can be ``NULL``, which does not refer to
any threads or stacks.

Tagged Reference
----------------

``tagref64``

+------+
| opct |
+======+
| 0x0E |
+------+

``tagref64`` is a union type of ``double``, ``int<52>`` and ``struct<ref<void>
int<6>``. It occupies 64 bits. A ``tagref64`` value holds both a state which
identifies the type it is currently representing and a value of that type.


    NOTE: When a ``tagref64`` contains an object reference, it can hold an
    ``int<6>`` together as a user-defined tag. It is useful to store type
    information.

When a ``tagref64`` represents a ``double`` NaN value, it does not preserve the
bit-wise representation of the NaN.

    NOTE: This type is intended to reuse the NaN space of the IEEE754 double
    value to multiplex with integers and object references. For this reason,
    when storing NaN values, it will still be NaN, but may not have the same bit
    representation.

..

    NOTE: This type is only available on some architectures including x86-64
    with 48-bit addresses.

Vector Type
-----------

``vector < T length >``

    ``T``
        *type* The type of elements.
    ``length``
        *integer literal*: The number of elements.

+------+-----+--------+
| opct | idt | lent   |
+======+=====+========+
| 0x0F | T   | length |
+------+-----+--------+

``vector`` is the vector type for single-instruction multiple-data (SIMD)
operations. A ``vector`` value is a packed value of multiple values of the same
type. *T* is the type of its elements and *length* is the number of elements.

It is allowed to have SSA variables of vector types.

    For LLVM users: This is the counterpart of the LLVM vector type.

..

    Example::
    
        .typedef @i32 = int<32>
        .typedef @float = float
        .typedef @double = double

        .typedef @vector1 = vector<@i32 4>
        .typedef @vector2 = vector<@float 4>
        .typedef @vector3 = vector<@double 2>
        .typedef @vector4 = vector<@double 4>

.. vim: tw=80
